<channel version="3.7.1">
  <id>bcbdbad5-c8f5-4120-91de-0c8e96b8093c</id>
  <nextMetaDataId>8</nextMetaDataId>
  <name>通用数据交换监听通道</name>
  <description></description>
  <revision>100</revision>
  <sourceConnector version="3.7.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.7.1">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.7.1">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="3.7.1">
        <host>0.0.0.0</host>
        <port>9088</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.7.1">
        <responseVariable>response</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>100</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <xmlBody>false</xmlBody>
      <parseMultipart>true</parseMultipart>
      <includeMetadata>false</includeMetadata>
      <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
      <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
      <responseContentType>text/plain</responseContentType>
      <responseDataTypeBinary>false</responseDataTypeBinary>
      <responseStatusCode></responseStatusCode>
      <responseHeaders class="linked-hash-map"/>
      <charset>UTF-8</charset>
      <contextPath>api</contextPath>
      <timeout>3600000</timeout>
      <staticResources/>
    </properties>
    <transformer version="3.7.1">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
          <name>通过参数中的命令，执行指定的目标</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>try{
	
	var obdata = JSON.parse(msg);
	//检查处理参数，对部分字符转大写
	exCheckParam(obdata);
	
	//只解析参数。判断cmd走读取还是走写入
	var cmd = obdata.cmd;
	channelMap.put(&apos;paramobj&apos;,obdata);
	
	if (cmd == &apos;readdb&apos;) {
		destinationSet.removeAllExcept([&apos;readdb&apos;]);
	} else if (cmd == &apos;recievedata&apos;) {
		destinationSet.removeAllExcept([&apos;recievedata&apos;]);
	} else {
		destinationSet.removeAllExcept([&apos;errorcmd&apos;]);
	}
} catch(e){
	destinationSet.removeAll();
	return createExOutcome(&apos;异常：参数json格式错误&apos; , 500, e);
} finally{
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>RAW</inboundDataType>
      <outboundDataType>RAW</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.7.1">
      <elements/>
    </filter>
    <transportName>HTTP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.7.1">
      <metaDataId>1</metaDataId>
      <name>readdb</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.7.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>infoBegin(&quot;dest.readdb&quot;);

var dbConn;
var conn;

var paramobj = channelMap.get(&apos;paramobj&apos;);
var source = paramobj.source;

var statement;
var resultData;
var response;
var errorMsg;
var dbNow;

try {
	errorMsg = &apos;创建源数据库连接失败&apos;;
	dbConn = DatabaseConnectionFactory.createDatabaseConnection(source.driverClassName
		,source.jdbcurl, source.dbuser, source.dbpwd);
	conn = dbConn.getConnection();

	//获取数据库的当前时间
	dbNow = DbUtilFactory.get(dbConn).getNow(dbConn);
	logger.info(&apos;------dbNow:&apos; + dbNow);

	errorMsg = &apos;源数据库执行查询失败&apos;;
	statement = conn.createStatement();
	logger.debug(&quot;源库执行查询:\n&quot; + source.sql);
	resultData = statement.executeQuery(source.sql);

	errorMsg = &apos;处理源数据失败&apos;;
	//获取数据集的结构
	var resultSetMetaData = listResultSetMetaData(resultData);
	logger.info(resultSetMetaData);

	//循环数据量
	var batchRows = source.batchRows || 1000;
	var rows = 0;
	var listData = new ArrayList();
	var bEnd = false;
	var resultProcess;
	//第几次调用，当mc写入目标库仅在第1次调用时执行deletesql
     var callNum = 1;
     var mqObj = getExMqObject(paramobj);
	while(true){ 
		if(resultData.next()){
			listData.add(getResultRow(resultData, resultSetMetaData));
			rows++;
	 	} else {
			bEnd = true;
		}
		if((bEnd &amp;&amp; listData.size()&gt;0)||(listData.size() % batchRows == 0)){
			mqObj.setSourceRows(listData.size());
			if(bEnd){
				mqObj.setEnd();
			}

			mqObj.setTargetBegin();
			resultProcess = exProcessData(listData, callNum);
			if(resultProcess.target &amp;&amp; resultProcess.target.rowsInsert){
				mqObj.setTargetRowsInsert(resultProcess.target.rowsInsert);
			}
			if(resultProcess.target &amp;&amp; resultProcess.target.rowsUpdate){
				mqObj.setTargetRowsUpdate(resultProcess.target.rowsUpdate);
			}
			mqObj.setTargetEnd();
			
			callNum = callNum + 1;
			if(resultProcess.code &lt; 0){
				response = new Response(JSON.stringify(resultProcess));
				response.setStatus(Status.ERROR);
				response.setError(resultProcess.msg);
				responseMap.put(&apos;response&apos;, response);

				//生产消息
				mqObj.produce();
				
				return response;
			}
			
			listData.clear();
			//生产消息
			mqObj.produce();
			
			mqObj = getExMqObject(paramobj);
		}

		if(bEnd){
			break;
		}
	}

	response = new Response(getServletResponseStr(&apos;执行成功&apos;));
	response.setStatus(Status.SENT);
	responseMap.put(&apos;response&apos;, response);
	return response;
} catch (e) {
	return createExOutcome(&apos;异常：&apos; + errorMsg, 500, e);
} finally {
	if(resultData){
		DbUtils.closeQuietly(resultData);
	}
	if(statement){
		DbUtils.closeQuietly(statement);
	}
	if (dbConn) { 
		//里面有try
		dbConn.close();
	}
	infoEnd(&quot;dest.readdb&quot;);
}

</script>
      </properties>
      <transformer version="3.7.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.7.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.7.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.7.1">
      <metaDataId>2</metaDataId>
      <name>recievedata</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.7.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>
var response;
var errorMsg;

try {
	var paramobj = $(&apos;paramobj&apos;);
	errorMsg = &apos;数据解码错误&apos;;
	//解码
	var listData = exDecode(paramobj.source.data);
	paramobj.source.data = &apos;&apos;;

	errorMsg = &apos;写入数据错误&apos;;
	var resultJson = exWriteDb(listData, paramobj);
	if(resultJson.code &lt; 0){
		response = new Response(JSON.stringify(resultJson));
		response.setStatus(Status.ERROR);
		response.setError(resultJson.msg);
		responseMap.put(&apos;response&apos;, response);
		return response;
	}
	
	response = new Response(JSON.stringify(resultJson));
	response.setStatus(Status.SENT);
	responseMap.put(&apos;response&apos;, response);
	return response;
} catch(e){
	return createExOutcome(&apos;异常：接收命令.&apos; + errorMsg, 500, e);
} finally {
}

</script>
      </properties>
      <transformer version="3.7.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.7.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.7.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.7.1">
      <metaDataId>7</metaDataId>
      <name>errorcmd</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.7.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>infoBegin(&quot;dest.errorcmd&quot;);

logger.debug(&apos;错误命令&apos;);

infoEnd(&quot;dest.errorcmd&quot;);</script>
      </properties>
      <transformer version="3.7.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.7.1">
        <elements/>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.7.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

if (!responseMap.containsKey(&apos;response&apos;)) {
	createExOutcome(&apos;error request URI&apos;);
}

return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.7.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.7.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1564018686901</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.7.1">
        <id>7dd70d81-65ef-49ef-89dd-46a2431f4858</id>
        <name>Debug Helper Functions</name>
        <revision>1</revision>
        <lastModified>
          <time>1563332377365</time>
          <timezone>Asia/Shanghai</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
          <string>bcbdbad5-c8f5-4120-91de-0c8e96b8093c</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>8d6e6cdd-0df8-4bb4-96bd-93ab71528275</string>
          <string>9a2d898b-8c69-43dc-b707-e95b9d754f5c</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.7.1">
            <id>ea90e127-561e-4d12-928b-42df095e1704</id>
            <name>Print Debug Info</name>
            <revision>2</revision>
            <lastModified>
              <time>1563344271109</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function infoBegin(arg1) {
	logger.info(&quot;----------------&quot;+arg1+&quot;.begin---------------&quot;);
}

/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function infoEnd(arg1) {
	logger.info(&quot;----------------&quot;+arg1+&quot;.end---------------&quot;);
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.7.1">
        <id>1addf16e-269d-4626-9455-97ed000681f1</id>
        <name>通用数据交换函数</name>
        <revision>17</revision>
        <lastModified>
          <time>1563871266341</time>
          <timezone>Asia/Shanghai</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>bcbdbad5-c8f5-4120-91de-0c8e96b8093c</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
          <string>f4fddc4a-7578-4562-af16-ae38f5436e17</string>
          <string>85724d51-0d7c-4056-aa47-c7041c2bd4f5</string>
          <string>6dc5e89c-8bec-40c6-a9a6-9dbe3659ce2a</string>
          <string>f55e670a-b6f5-4f49-8a9b-3b32994719c5</string>
          <string>84c9fcc4-915a-4403-b720-9e82f472b8ce</string>
          <string>f3446bb4-2f7c-4d18-b9d4-eae0ffd1486e</string>
          <string>9e652a44-d2ac-47bd-8afc-47909359e800</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="3.7.1">
            <id>dcf7734a-2c42-4017-b176-62db867b1da9</id>
            <name>httppost函数</name>
            <revision>23</revision>
            <lastModified>
              <time>1563787552031</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	调用mc接口

	@param {String} url - url
	@param {String} bodyStr - post的消息体
	@return {JSON} return 返回json对象
*/
function callHttpPost(url, bodyStr) {
	var httpclient;
	var httpResponse;
	try {
		httpclient = HttpClientBuilder.create().build();
		var httpPost = new HttpPost(url);
		//设置连接超时
		var requestConfig = RequestConfig.custom().setConnectTimeout(5000).setConnectionRequestTimeout(5000)
				.setSocketTimeout(600000).build();
		httpPost.setConfig(requestConfig);
		// 添加所需要的post内容
		/*var nvps = new ArrayList();
		for (var entry in parameters.entrySet()) {
			var name = StringUtils.asString(entry.getKey());
			var value = StringUtils.asString(entry.getValue());
			if (!name.isEmpty()) {
				nvps.add(new BasicNameValuePair(name, value));
			}
		}
		httpPost.setEntity(new UrlEncodedFormEntity(nvps, UTF_8));*/
	
		var stringEntity = new StringEntity(bodyStr, Charset.forName(&quot;UTF-8&quot;));
		httpPost.setEntity(stringEntity);
		
		httpResponse = httpclient.execute(httpPost);
		var statusCode = httpResponse.getStatusLine().getStatusCode();
		if (statusCode != 200) {
			return getServletResponseJson(&apos;调用接口失败，失败状态码:&apos;+statusCode, -1);
		}
	
		var httpEntity = httpResponse.getEntity();
		return JSON.parse(EntityUtils.toString(httpEntity, &apos;UTF-8&apos;));
	} finally {
		if(httpResponse){
			HttpClientUtils.closeQuietly(httpResponse);
		}
		if(httpclient){
			HttpClientUtils.closeQuietly(httpclient);
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>cfe54723-88b1-48d6-9257-cdf3f4640bd4</id>
            <name>创建异常时http返回资源函数</name>
            <revision>15</revision>
            <lastModified>
              <time>1563867964967</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	创建资源，并使用key=response放到responseMap中

	@param {String} details - Additional details about the error. This may be a text description of
		the error, or a system code that identifies the error.
	@param {int} httpStatusCode - The HTTP status code to send back with the response. Defaults to 400
		if not specified.
	@param {Error} e - If included, this will be used to build up the response status message and
		error.
	@return {Response} The created Response object.
*/
function createExOutcome(details, httpStatusCode, e) {
	infoBegin(&apos;创建返回资源&apos;);
	if (!httpStatusCode) {
		httpStatusCode = 400;
	}

	var response;

	if (httpStatusCode &gt;= 400) {
		response = new Response(getServletResponseStr(details, -1));
		response.setStatus(Status.ERROR);

		var mqObj = channelMap.get(&apos;mqObj&apos;) || getExMqObject(channelMap.get(&apos;paramobj&apos;));
		mqObj.setCode(-1);
			
		if (e) {
			var customMessage = &apos;通道 &apos; + channelName + &apos;: &apos; + details;
			if (e.rhinoException) {
				customMessage += &apos; 错误行- &apos; + e.rhinoException.lineNumber() + &apos;: &apos;;
			}
			customMessage += e.toString();
	
			var errorContent = com.mirth.connect.util.ErrorMessageBuilder.buildErrorMessage(&apos;批量数据交换&apos;, customMessage, e.javaException || null);
			if (e.javaException) {
				logger.error(errorContent, e.javaException);	
			} else {
				logger.error(errorContent);
			}
			
			response.setError(errorContent);

			mqObj.setError(errorContent);
		} else {
			response.setError(details);
		}
	} else {
		response = new Response(getServletResponseStr(details));
		
		var mqObj = channelMap.get(&apos;mqObj&apos;) || getExMqObject(channelMap.get(&apos;paramobj&apos;).resAskId);
		mqObj.setCode(1);
	}

	mqObj.produce();
	
	responseMap.put(&apos;response&apos;, response);
	infoEnd(&apos;创建返回资源&apos;);
	return response;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>a4898816-e3a7-4ba1-b4c1-27fdf90dd16e</id>
            <name>加解密相关函数</name>
            <revision>2</revision>
            <lastModified>
              <time>1563442545066</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	对象的加密

	@param {Object} object - 对象
	@param {String} encodeType - 加密方式，默认base64
	@return {String} return base64字符串
*/
function exEncode(object, encodeType) {
	if(!encodeType){
		encodeType = &quot;base64&quot;;
	}
	if(encodeType == &quot;base64&quot;){
		return object2Base64Str(object);
	} else {
		//后续可以增加其他加密方式
		return &quot;&quot;;
	}
}


/**
	对象的解密

	@param {String} string - base64字符串
	@param {String} decodeType - 解密方式
	@return {Object} return 对象
*/
function exDecode(string, decodeType) {
	if(!decodeType){
		decodeType = &quot;base64&quot;;
	}
	if(decodeType == &quot;base64&quot;){
		return base64Str2Object(string);
	} else {
		//后续可以增加其他解密方式
		return null;
	}
	
}


</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>883c8f59-32e6-4b65-9650-a4569488f456</id>
            <name>参数检查转换函数</name>
            <revision>3</revision>
            <lastModified>
              <time>1563527521669</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	参数检查转换函数

	@param {JSON} arg1 - json参数
	@return 
*/
function exCheckParam(paramObj) {
	if(paramObj.source.mdate){
		paramObj.source.mdate = paramObj.source.mdate.toUpperCase();
	}
	if(paramObj.source.pk){
		paramObj.source.pk = paramObj.source.pk.toUpperCase();
	}
	if(paramObj.target.pk){
		paramObj.target.pk = paramObj.target.pk.toUpperCase();
	}
	for(var i=0; i&lt;paramObj.target.fieldsmap.length; i++){
		var fieldmap = paramObj.target.fieldsmap[i];
		if(fieldmap.src){
			fieldmap.src = fieldmap.src.toUpperCase();
		}
		if(fieldmap.dest){
			fieldmap.dest = fieldmap.dest.toUpperCase();
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>51aea973-144e-4ef7-ad89-8601c67bfea2</id>
            <name>处理数据函数</name>
            <revision>19</revision>
            <lastModified>
              <time>1563781716390</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	处理数据，根据是否有目标的api，来判断是写数据库，还是调用接口.

	@param {List} listData - 数据列表
	@return {JSON} return 返回json对象
*/
function exProcessData(listData, callNum) {
	var paramobj = channelMap.get(&apos;paramobj&apos;);
	paramobj.callNum = callNum;
	if(paramobj.target.api){
		//判断当前字符串是否以str结束
	     if (typeof String.prototype.endsWith != &apos;function&apos;) {
	       String.prototype.endsWith = function (str){
	          return this.slice(-str.length) == str;
	       };
	     }
	     if(!paramobj.target.api.endsWith(&apos;/&apos;)){
	     	paramobj.target.api = paramobj.target.api + &apos;/&apos;;
	     }
		//调用mc接口
		paramobj.cmd = &apos;recievedata&apos;;
		return _callHttpPost(listData, paramobj);
	} else {
		//直写数据库
		return exWriteDb(listData, paramobj);
	}
}

function _callHttpPost(listData, paramobj){
	paramobj.source.data = exEncode(listData);
	return callHttpPost(paramobj.target.api, JSON.stringify(paramobj));
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>c8e1f8e9-a6c7-44b3-a640-385c6917808d</id>
            <name>序列号相关函数</name>
            <revision>1</revision>
            <lastModified>
              <time>1563332377788</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	对象序列化为字节数组

	@param {object} object - 对象
	@return {byte[]} return 字节数组
*/
function object2Bytes(object) {
	var byteArrayOutputStream;
	var objectOutputStream;
	try{
		byteArrayOutputStream = new ByteArrayOutputStream();
		objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
		objectOutputStream.writeObject(object);
		return byteArrayOutputStream.toByteArray();
	} finally{
		if (byteArrayOutputStream != null) {
			try {
				byteArrayOutputStream.close();
			} catch (e) {}
		}
		if (objectOutputStream != null) {
			try {
				objectOutputStream.close();
			} catch (e) {}
		}
	}
}

/**
	对象序列化为字节数组，并用Base64加码

	@param {object} object - 对象
	@return {String} return 字符串
*/
function object2Base64Str(object) {
	var bytes = object2Bytes(object);
	return FileUtil.encode(bytes);
}

/**
	对象序列化为字节数组

	@param {byte[]} object - 字节数组
	@return {Object} return 对象
*/
function bytes2Object(bytes) {
	var byteArrayInputStream;
	var objectInputStream;
	try {
		byteArrayInputStream = new ByteArrayInputStream(bytes);
		objectInputStream = new ObjectInputStream(byteArrayInputStream);
		return objectInputStream.readObject();
	} finally {
		if (byteArrayInputStream != null) {
			try {
				byteArrayInputStream.close();
			} catch (e) {}
		}
		if (objectInputStream != null) {
			try {
				objectInputStream.close();
			} catch (e) {}
		}
	}
}


/**
	Base64加码字符串反序列号为对象

	@param {string} string - 字符串
	@return {Object} return 对象
*/
function base64Str2Object(string) {
	var bytes = FileUtil.decode(string);
	return bytes2Object(bytes);
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>474bb3c2-86ff-44aa-8d10-8f2c618c7fe7</id>
            <name>引入包</name>
            <revision>6</revision>
            <lastModified>
              <time>1563765945813</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>importPackage(Packages.org.apache.commons.dbutils);
importPackage(Packages.java.util);
importPackage(Packages.java.io);
importPackage(Packages.java.lang);
//httpclient需要的包
importPackage(Packages.org.apache.http.impl.client);
importPackage(Packages.org.apache.http.client.methods);
importPackage(Packages.org.apache.http.client.config);
importPackage(Packages.org.apache.http.entity);
importPackage(Packages.org.apache.http);
importPackage(Packages.org.apache.http.util);
importPackage(Packages.org.apache.http.client.utils);
importPackage(Packages.java.nio.charset);

//数据交换消息
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>fc7190c8-1277-4c82-8de6-9059d28d9559</id>
            <name>数据写入函数</name>
            <revision>47</revision>
            <lastModified>
              <time>1563785119750</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	写入数据到数据库

	@param {List} arg1 - 数据
	@return {none} return 无返回
*/
function exWriteDb(listData, paramobj) {
	var dbConn;
	var target = paramobj.target;
	var errorMsg;
	
	try{
		errorMsg = &apos;获取目标数据库连接失败&apos;;
		dbConn = DatabaseConnectionFactory.createDatabaseConnection(target.driverClassName
			,target.jdbcurl, target.dbuser, target.dbpwd);

		errorMsg = &apos;写入数据失败&apos;;
		//根据参数处理
		_processData(paramobj, dbConn, listData);
		
		var servletResponse = getServletResponseJson(&apos;执行成功&apos;);
		servletResponse.target = {};
		if(paramobj.target.rowsInsert){
			servletResponse.target.rowsInsert = paramobj.target.rowsInsert;
		}
		if(paramobj.target.rowsUpdate){
			servletResponse.target.rowsUpdate = paramobj.target.rowsUpdate;
		}
		return servletResponse;
	}catch (e) {
		return getServletResponseJson(errorMsg + e.toString(), -1);
	} finally {
		if (dbConn) { 
			//里面有try
			dbConn.close();
		}
	}
}


function _processData(paramobj, dbConn, listData){
	//1判断是否有删除语句
	//1.1有则先执行，然后通过fieldsmap生成insert语句
	//1.2没有，则根据主键生成判断目标表是否存在sql执行，根据结果生成insert语句、update语句、insert数据、update数据
	if(paramobj.target.deletesql){
		//只有第一次才删除
		if(paramobj.callNum &amp;&amp; paramobj.callNum==1){
			logger.info(&quot;执行删除=&quot; + paramobj.target.deletesql);
			dbConn.executeUpdate(paramobj.target.deletesql);
		}
		var sql = _getInsertSql(paramobj);
		var listParams = _listInsertParam(paramobj, listData);
		_exWriteBatch(dbConn.getConnection(), sql, listParams);
		paramobj.target.rowsInsert = listData.size();
	} else {
		
	}
}

function _listInsertParam(paramobj, listdata){
	var list = [];
	for(var i=0;i&lt;listdata.size();i++){
		var row = listdata.get(i);
		var rowParam = [];
		for(var j=0;j&lt;paramobj.target.fieldsmap.length;j++){
			var fieldmap = paramobj.target.fieldsmap[j];
			rowParam.push(row.get(fieldmap.src));
		}
		list.push(rowParam);
	}

	return list;
}

//返回sql
function _getInsertSql(paramobj){
	var fields = &apos;&apos;;
	var values = &apos;&apos;;
	for(var i=0;i&lt;paramobj.target.fieldsmap.length;i++){
		var fieldmap = paramobj.target.fieldsmap[i];
		if(fields){
			fields = fields + &apos;,&apos; + fieldmap.dest;
			values = values + &apos;,&apos; + &apos;?&apos;;
		} else {
			fields = fieldmap.dest;
			values = &apos;?&apos;;
		}
	}
	return &apos;insert into &apos; + paramobj.target.table + &apos;(&apos;+ fields + &apos;) values(&apos; + values+ &apos;)&apos;;
}

function _getUpdateSql(paramobj){
	var fieldsvalue = &apos;&apos;;
	for(var i=0;i&lt;paramobj.target.fieldsmap.length;i++){
		var fieldmap = paramobj.target.fieldsmap[i];
		//如果是主键，跳过
		if(fieldmap.dest == paramobj.target.pk){
			continue;
		}
		if(fieldsvalue){
			fieldsvalue = fieldsvalue + &apos;,&apos; + fieldmap.dest + &apos;=?&apos;;
		} else {
			fieldsvalue = fieldmap.dest + &apos;=?&apos;;
		}
	}
	return &apos;update &apos; + paramobj.target.table + &apos; set &apos;+ fieldsvalue + &apos; where &apos; + paramobj.target.pk + &apos;=?&apos;;
}

function _exWriteBatch(conn, sql, listValue) {
	var preparedStatement;
	try {
		conn.setAutoCommit(false);
		preparedStatement = conn.prepareStatement(sql);
		for (var i=0;i&lt;listValue.length;i++) {
			var row = listValue[i];
	          _setPrepareStatementValues(preparedStatement, row);
	          preparedStatement.addBatch();
     	}
     	preparedStatement.executeBatch();
     	conn.commit();
	} catch(e) {
		conn.rollback();
		throw e;
	} finally {
		_exClosePs(preparedStatement);
	}
}

function _exClosePs(preparedStatement) {
	if(preparedStatement){
		DbUtils.closeQuietly(preparedStatement);
	}
}

function _setPrepareStatementValues(stmt, values) {
	for (var i = 0; i &lt; values.length; i++) {
		stmt.setObject(i + 1, values[i]);
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>e7c6c0e0-4611-4049-a01f-7ce7c67ae818</id>
            <name>数据库工具工厂类</name>
            <revision>4</revision>
            <lastModified>
              <time>1563871496051</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function DbUtilFactory() {}

DbUtilFactory.get = function(dbConn){
	var driverName = dbConn.getConnection().getMetaData().getDriverName().toUpperCase();
	if(driverName.indexOf(&quot;POSTGRESQL&quot;) &gt;= 0){
		return PgDbUtil;
	} else if (driverName.indexOf(&quot;ORACLE&quot;) &gt;= 0){
		return OracleDbUtil;
	} else {
		return SqlServerDbUtil;
	} 
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>e57c103f-92bc-4235-a955-ddb6e860f5f1</id>
            <name>数据库方言工具对象-oracle</name>
            <revision>3</revision>
            <lastModified>
              <time>1563869726736</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function OracleDbUtil() {

	OracleDbUtil.getNow = function(dbConn){
		var cachedRowSet = dbConn.executeCachedQuery(&quot;select to_char(sysdate,&apos;yyyy-mm-dd hh24:mi:ss&apos;) gnow from dual&quot;, new ArrayList());
		cachedRowSet.next();
		return cachedRowSet.getString(0);
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>7180031c-3e75-4368-9484-1327167f5a50</id>
            <name>数据库方言工具对象-postgresql</name>
            <revision>3</revision>
            <lastModified>
              <time>1563870393743</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function PgDbUtil() {}

PgDbUtil.getNow = function(dbConn){
	var cachedRowSet = dbConn.executeCachedQuery(&quot;SELECT to_char(now(),&apos;yyyy-mm-dd hh24:mi:ss&apos;)&quot;, new ArrayList());
	cachedRowSet.next();
	return cachedRowSet.getString(1);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>ac5e4ea2-956e-454c-a9dc-c7a06b009bc0</id>
            <name>数据库方言工具对象-sqlserver</name>
            <revision>1</revision>
            <lastModified>
              <time>1563871266352</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function SqlServerDbUtil() {}

SqlServerDbUtil.getNow = function(dbConn){
	var cachedRowSet = dbConn.executeCachedQuery(&quot;select convert(varchar(20),getdate(),120) gnow&quot;, new ArrayList());
	cachedRowSet.next();
	return cachedRowSet.getString(1);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>0b27a256-b4ef-46ba-b04f-26f6dbcf4967</id>
            <name>数据集相关函数</name>
            <revision>2</revision>
            <lastModified>
              <time>1563869726707</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	获取数据集的结构

	@param {ResultSet} resultSet - 数据集
	@return {ArrayList} 返回数据集的结构
*/
function listResultSetMetaData(resultSet) {
	var list = new ArrayList();

	var resultSetMetaData = resultSet.getMetaData();

	for (var i = 1; i &lt;= resultSetMetaData.getColumnCount(); i++) {
		var columnName = resultSetMetaData.getColumnName(i).toUpperCase();
		var columnType = resultSetMetaData.getColumnTypeName(i);
		var map = new HashMap();
		map.put(&apos;column&apos;,columnName);
		map.put(&apos;type&apos;,columnType);
		list.add(map);
	}

	return list;
}

function getResultRow(resultSet, listMetaData){
	var row = new HashMap();
	var colMetaData;
	var fieldName;
	for (var i = 0; i &lt; listMetaData.size(); i++) {
		colMetaData = listMetaData.get(i);
		fieldName = colMetaData.get(&apos;column&apos;);
		row.put(fieldName, getResultCol(resultSet, fieldName, colMetaData.get(&apos;type&apos;)));
	}
	return row;
}

function getResultCol(resultSet, fieldName, fieldType){
	if (&apos;clob&apos; == fieldType) {
		return resultSet.getClob(fieldName);
	} else if (&apos;blob&apos; == fieldType) {
		return resultSet.getBlob(fieldName);
	} else {
		return resultSet.getObject(fieldName);
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>0ef3d49c-9cd0-409a-abd5-5f0e4b2dbb72</id>
            <name>测试函数</name>
            <revision>1</revision>
            <lastModified>
              <time>1563332377693</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testStrJava(result) {
	var chars = [&apos;a&apos;,&apos;b&apos;,&apos;0&apos;];

	logger.info(&quot;cdate类型=&quot;+getClassName(result.getObject(&quot;cdate&quot;)));

	var map = new HashMap();
	map.put(&quot;dbId&quot;, result.getObject(&quot;db_id&quot;));
	map.put(&quot;cdate&quot;, result.getObject(&quot;cdate&quot;));

	var string = exEncode(map);
	logger.info(&quot;map序列号并base64：&quot;+string);

	var toMap2 = exDecode(string);
	logger.info(&quot;toMap2类型=&quot;+getClassName(toMap2));
	logger.info(&quot;base64字符串反序列号为map：&quot;+toMap2);
	
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>0260b377-2eaf-4d20-bdd0-95f551d79794</id>
            <name>消息相关函数</name>
            <revision>30</revision>
            <lastModified>
              <time>1563868628239</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	发送数据交换消息.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getExMqObject(paramObj){
	var obj = new ExMqObject(paramObj);
	obj.setSourceBegin();
	channelMap.put(&apos;mqObj&apos;, obj);
	return obj;
}

function ExMqObject(paramObj) {
	this.resAskId = paramObj.resAskId;
	this.source = {};
	this.target = {};
	var mqserver = paramObj.mqserver;
}

ExMqObject.prototype = {
	setCode : function(code){
		this.code = code;
	},
	setError : function(error){
		this.error = error;
	},
	setEnd : function(){
		this.source.isEnd = 1;
	},
	setSourceBegin : function(){
		this.source.exeBeginTime = this._getMqTime();
	},
	setSourceRows : function(rows){
		this.source.rows = rows;
		this.source.exeEndTime = this._getMqTime();
		this.source.exeCostTime = this._getTimeCost(this.source.exeBeginTime, this.source.exeEndTime);
	},
	setTargetBegin : function(){
		this.target.exeBeginTime = this._getMqTime();
	},
	setTargetRowsInsert : function(rows){
		this.target.rowsInsert = rows;
	},
	setTargetRowsUpdate : function(rows){
		this.target.rowsUpdate = rows;
	},
	setTargetEnd : function(){
		this.target.exeEndTime = this._getMqTime();
		this.target.exeCostTime = this._getTimeCost(this.target.exeBeginTime, this.target.exeEndTime);
	},
	produce : function() {
		logger.info(&apos;发布消息mqObj：&apos;+JSON.stringify(this));
	},
	_getMqTime: function() {
		return new Date().getTime();
	},
	_getTimeCost: function(begin, end){
		return end-begin;
	}

	
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>85f6f21b-6f4f-4079-9a9e-115d122dd3a6</id>
            <name>类名相关函数</name>
            <revision>2</revision>
            <lastModified>
              <time>1563524584657</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getClassName(obj) {
	if(obj){
		var className = &apos;&apos;;
		try{
			className = obj.getClass().toString();
		} catch(e){}
		return className + &quot;/&quot; + typeof obj;
	} else {
		return &quot;null&quot;;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>283fb344-0c24-47c6-ba66-06eb9f0b9db1</id>
            <name>获取ServletResponse返回的json对象函数</name>
            <revision>3</revision>
            <lastModified>
              <time>1563442545080</time>
              <timezone>Asia/Shanghai</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	获取ServletResponse的json对象，包含2个属性,code,msg

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getServletResponseJson(msg, code) {
	var result = {};
	if(!code){
		code = 1;
	}
	result.code = code;
	result.msg = msg;
	return result;
}

function getServletResponseStr(msg, code) {
	return JSON.stringify(getServletResponseJson(msg, code));
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>