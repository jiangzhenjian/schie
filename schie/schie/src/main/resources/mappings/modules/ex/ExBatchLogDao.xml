<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.schic.schie.modules.exask.dao.ExBatchLogDao">
    
	<sql id="exBatchLogColumns">
					a.id AS "id",
					a.res_askid AS "resAskid",
					a.src_rows AS "srcRows",
					a.src_exe_begintime AS "srcExeBegintime",
					a.src_exe_endtime AS "srcExeEndtime",
					a.src_isend AS "srcIsend",
					a.src_exe_costtime AS "srcExeCosttime",
					a.tar_exe_begintime AS "tarExeBegintime",
					a.tar_exe_endtime AS "tarExeEndtime",
					a.tar_exe_costtime AS "tarExeCosttime",
					a.tar_rows_update AS "tarRowsUpdate",
					a.tar_rows_insert AS "tarRowsInsert",
					a.tar_rows_ignore AS "tarRowsIgnore",
					a.create_date AS "createDate"
	</sql>

	<sql id="exBatchLogColumnsList">
					a.id AS "id",
					a.res_askid AS "resAskid",
					a.src_rows AS "srcRows",
					a.src_exe_begintime AS "srcExeBegintime",
					a.src_exe_endtime AS "srcExeEndtime",
					a.src_isend AS "srcIsend",
					a.src_exe_costtime AS "srcExeCosttime",
					a.tar_exe_begintime AS "tarExeBegintime",
					a.tar_exe_endtime AS "tarExeEndtime",
					a.tar_exe_costtime AS "tarExeCosttime",
					a.tar_rows_update AS "tarRowsUpdate",
					a.tar_rows_insert AS "tarRowsInsert",
					a.tar_rows_ignore AS "tarRowsIgnore",
					a.create_date AS "createDate"
	</sql>

	<sql id="exBatchLogJoins">
	</sql>
    
	<select id="get" resultType="ExBatchLog">
		SELECT 
			<include refid="exBatchLogColumns"/>
		FROM ex_batch_log a
		<include refid="exBatchLogJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="ExBatchLog">
		SELECT 
			<include refid="exBatchLogColumnsList"/>
		FROM ex_batch_log a
		<include refid="exBatchLogJoins"/>
		<where>
			
			<if test="id != null and id != ''">
				AND a.id = #{id}
			</if>
			<if test="resAskid != null and resAskid != ''">
				AND a.res_askid = #{resAskid}
			</if>
			<if test="srcRows != null and srcRows != ''">
				AND a.src_rows = #{srcRows}
			</if>
			<if test="beginSrcExeBegintime != null and endSrcExeBegintime != null ">
				AND a.src_exe_begintime BETWEEN #{beginSrcExeBegintime} AND #{endSrcExeBegintime}
			</if>
			<if test="beginSrcExeEndtime != null and endSrcExeEndtime != null ">
				AND a.src_exe_endtime BETWEEN #{beginSrcExeEndtime} AND #{endSrcExeEndtime}
			</if>
			<if test="srcIsend != null and srcIsend != ''">
				AND a.src_isend = #{srcIsend}
			</if>
			<if test="srcExeCosttime != null and srcExeCosttime != ''">
				AND a.src_exe_costtime = #{srcExeCosttime}
			</if>
			<if test="beginTarExeBegintime != null and endTarExeBegintime != null ">
				AND a.tar_exe_begintime BETWEEN #{beginTarExeBegintime} AND #{endTarExeBegintime}
			</if>
			<if test="beginTarExeEndtime != null and endTarExeEndtime != null ">
				AND a.tar_exe_endtime BETWEEN #{beginTarExeEndtime} AND #{endTarExeEndtime}
			</if>
			<if test="tarExeCosttime != null and tarExeCosttime != ''">
				AND a.tar_exe_costtime = #{tarExeCosttime}
			</if>
			<if test="tarRowsUpdate != null and tarRowsUpdate != ''">
				AND a.tar_rows_update = #{tarRowsUpdate}
			</if>
			<if test="tarRowsInsert != null and tarRowsInsert != ''">
				AND a.tar_rows_insert = #{tarRowsInsert}
			</if>
			<if test="tarRowsIgnore != null and tarRowsIgnore != ''">
				AND a.tar_rows_ignore = #{tarRowsIgnore}
			</if>
			<if test="beginCreateDate != null and endCreateDate != null ">
				AND a.create_date BETWEEN #{beginCreateDate} AND #{endCreateDate}
			</if>
		</where>
		<choose>
			<when test="where !=null and where != ''">
				AND ${where}
			</when>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="ExBatchLog">
		SELECT 
			<include refid="exBatchLogColumnsList"/>
		FROM ex_batch_log a
		<include refid="exBatchLogJoins"/>
		<where>
			
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO ex_batch_log(
			id,
			res_askid,
			src_rows,
			src_exe_begintime,
			src_exe_endtime,
			src_isend,
			src_exe_costtime,
			tar_exe_begintime,
			tar_exe_endtime,
			tar_exe_costtime,
			tar_rows_update,
			tar_rows_insert,
			tar_rows_ignore,
			create_date
		) VALUES (
			#{id},
			#{resAskid},
			#{srcRows},
			#{srcExeBegintime},
			#{srcExeEndtime},
			#{srcIsend},
			#{srcExeCosttime},
			#{tarExeBegintime},
			#{tarExeEndtime},
			#{tarExeCosttime},
			#{tarRowsUpdate},
			#{tarRowsInsert},
			#{tarRowsIgnore},
			#{createDate}
		)
	</insert>
	
	<update id="update">
		UPDATE ex_batch_log SET 	
			res_askid = #{resAskid},
			src_rows = #{srcRows},
			src_exe_begintime = #{srcExeBegintime},
			src_exe_endtime = #{srcExeEndtime},
			src_isend = #{srcIsend},
			src_exe_costtime = #{srcExeCosttime},
			tar_exe_begintime = #{tarExeBegintime},
			tar_exe_endtime = #{tarExeEndtime},
			tar_exe_costtime = #{tarExeCosttime},
			tar_rows_update = #{tarRowsUpdate},
			tar_rows_insert = #{tarRowsInsert},
			tar_rows_ignore = #{tarRowsIgnore}
		WHERE id = #{id}
	</update>
	
	
	<!--物理删除-->
	<update id="delete">
		DELETE FROM ex_batch_log
		WHERE id = #{id}
	</update>
	
	<!--逻辑删除-->
	<update id="deleteByLogic">
		UPDATE ex_batch_log SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

	<select id="findUniqueByProperty" resultType="ExBatchLog" statementType="STATEMENT">
		select * FROM ex_batch_log  where ${propertyName} = '${value}'
	</select>

	<select id="total" resultType="ExBatchLog">
		SELECT
			<choose>
				<when test=" totalType != null and totalType != ''">
					DATE_FORMAT(a.create_date,'${totalType}') as totalDate,
				</when>
				<otherwise>
				 </otherwise>
			</choose>
			count(*) as totalCount
		FROM
			ex_batch_log a
		<where>
			1=1
			
			<if test="id != null and id != ''">
				AND a.id = #{id}
			</if>
			<if test="resAskid != null and resAskid != ''">
				AND a.res_askid = #{resAskid}
			</if>
			<if test="srcRows != null and srcRows != ''">
				AND a.src_rows = #{srcRows}
			</if>
			<if test="beginSrcExeBegintime != null and endSrcExeBegintime != null ">
				AND a.src_exe_begintime BETWEEN #{beginSrcExeBegintime} AND #{endSrcExeBegintime}
			</if>
			<if test="beginSrcExeEndtime != null and endSrcExeEndtime != null ">
				AND a.src_exe_endtime BETWEEN #{beginSrcExeEndtime} AND #{endSrcExeEndtime}
			</if>
			<if test="srcIsend != null and srcIsend != ''">
				AND a.src_isend = #{srcIsend}
			</if>
			<if test="srcExeCosttime != null and srcExeCosttime != ''">
				AND a.src_exe_costtime = #{srcExeCosttime}
			</if>
			<if test="beginTarExeBegintime != null and endTarExeBegintime != null ">
				AND a.tar_exe_begintime BETWEEN #{beginTarExeBegintime} AND #{endTarExeBegintime}
			</if>
			<if test="beginTarExeEndtime != null and endTarExeEndtime != null ">
				AND a.tar_exe_endtime BETWEEN #{beginTarExeEndtime} AND #{endTarExeEndtime}
			</if>
			<if test="tarExeCosttime != null and tarExeCosttime != ''">
				AND a.tar_exe_costtime = #{tarExeCosttime}
			</if>
			<if test="tarRowsUpdate != null and tarRowsUpdate != ''">
				AND a.tar_rows_update = #{tarRowsUpdate}
			</if>
			<if test="tarRowsInsert != null and tarRowsInsert != ''">
				AND a.tar_rows_insert = #{tarRowsInsert}
			</if>
			<if test="tarRowsIgnore != null and tarRowsIgnore != ''">
				AND a.tar_rows_ignore = #{tarRowsIgnore}
			</if>
			<if test="beginCreateDate != null and endCreateDate != null ">
				AND a.create_date BETWEEN #{beginCreateDate} AND #{endCreateDate}
			</if>
		</where>
		<choose>
			<when test=" groupBy != null and groupBy != '' and totalType != null and totalType != '' ">
				GROUP BY DATE_FORMAT(a.create_date,'${totalType}'),${groupBy}
			</when>
			<when test=" groupBy != null and groupBy != ''">
				GROUP BY ${groupBy}
			</when>
			<when test=" totalType != null and totalType != ''">
				GROUP BY DATE_FORMAT(a.create_date,'${totalType}')
			</when>
			<otherwise>
			 </otherwise>
		</choose>
		<choose>
			<when test=" orderBy != null and orderBy != ''">
				ORDER BY ${orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
</mapper>