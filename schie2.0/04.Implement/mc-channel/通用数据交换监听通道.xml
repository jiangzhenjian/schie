<codeTemplateLibrary version="3.7.1">
  <id>1addf16e-269d-4626-9455-97ed000681f1</id>
  <name>通用数据交换函数</name>
  <revision>20</revision>
  <lastModified>
    <time>1564036071575</time>
    <timezone>Asia/Shanghai</timezone>
  </lastModified>
  <description></description>
  <includeNewChannels>false</includeNewChannels>
  <enabledChannelIds>
    <string>bcbdbad5-c8f5-4120-91de-0c8e96b8093c</string>
  </enabledChannelIds>
  <disabledChannelIds>
    <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
    <string>f4fddc4a-7578-4562-af16-ae38f5436e17</string>
    <string>85724d51-0d7c-4056-aa47-c7041c2bd4f5</string>
    <string>6dc5e89c-8bec-40c6-a9a6-9dbe3659ce2a</string>
    <string>f55e670a-b6f5-4f49-8a9b-3b32994719c5</string>
    <string>84c9fcc4-915a-4403-b720-9e82f472b8ce</string>
    <string>f3446bb4-2f7c-4d18-b9d4-eae0ffd1486e</string>
    <string>9e652a44-d2ac-47bd-8afc-47909359e800</string>
  </disabledChannelIds>
  <codeTemplates>
    <codeTemplate version="3.7.1">
      <id>dcf7734a-2c42-4017-b176-62db867b1da9</id>
      <name>httppost函数</name>
      <revision>23</revision>
      <lastModified>
        <time>1563787552031</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	调用mc接口

	@param {String} url - url
	@param {String} bodyStr - post的消息体
	@return {JSON} return 返回json对象
*/
function callHttpPost(url, bodyStr) {
	var httpclient;
	var httpResponse;
	try {
		httpclient = HttpClientBuilder.create().build();
		var httpPost = new HttpPost(url);
		//设置连接超时
		var requestConfig = RequestConfig.custom().setConnectTimeout(5000).setConnectionRequestTimeout(5000)
				.setSocketTimeout(600000).build();
		httpPost.setConfig(requestConfig);
		// 添加所需要的post内容
		/*var nvps = new ArrayList();
		for (var entry in parameters.entrySet()) {
			var name = StringUtils.asString(entry.getKey());
			var value = StringUtils.asString(entry.getValue());
			if (!name.isEmpty()) {
				nvps.add(new BasicNameValuePair(name, value));
			}
		}
		httpPost.setEntity(new UrlEncodedFormEntity(nvps, UTF_8));*/
	
		var stringEntity = new StringEntity(bodyStr, Charset.forName(&quot;UTF-8&quot;));
		httpPost.setEntity(stringEntity);
		
		httpResponse = httpclient.execute(httpPost);
		var statusCode = httpResponse.getStatusLine().getStatusCode();
		if (statusCode != 200) {
			return getServletResponseJson(&apos;调用接口失败，失败状态码:&apos;+statusCode, -1);
		}
	
		var httpEntity = httpResponse.getEntity();
		return JSON.parse(EntityUtils.toString(httpEntity, &apos;UTF-8&apos;));
	} finally {
		if(httpResponse){
			HttpClientUtils.closeQuietly(httpResponse);
		}
		if(httpclient){
			HttpClientUtils.closeQuietly(httpclient);
		}
	}
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>cfe54723-88b1-48d6-9257-cdf3f4640bd4</id>
      <name>创建异常时http返回资源函数</name>
      <revision>19</revision>
      <lastModified>
        <time>1566802724673</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>CHANNEL_POSTPROCESSOR</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	创建资源，并使用key=response放到responseMap中

	@param {String} details - Additional details about the error. This may be a text description of
		the error, or a system code that identifies the error.
	@param {int} httpStatusCode - The HTTP status code to send back with the response. Defaults to 400
		if not specified.
	@param {Error} e - If included, this will be used to build up the response status message and
		error.
	@return {Response} The created Response object.
*/
function createExOutcome(details, httpStatusCode, e) {
	PrintUtil.begin(&apos;创建返回资源&apos;);
	if (!httpStatusCode) {
		httpStatusCode = 400;
	}

	var response;

	if (httpStatusCode &gt;= 400) {
		response = new Response(getServletResponseStr(details, -1));
		response.setStatus(Status.ERROR);

		var mqObj = channelMap.get(&apos;mqObj&apos;) || getExMqObject(channelMap.get(&apos;paramobj&apos;));
		mqObj.setCode(-1);
			
		if (e) {
			var customMessage = &apos;通道 &apos; + channelName + &apos;: &apos; + details;
			if (e.rhinoException) {
				customMessage += &apos; 错误行- &apos; + e.rhinoException.lineNumber() + &apos;: &apos;;
			}
			logger.info(e.toString());
			customMessage += e.toString();
	
			var errorContent = com.mirth.connect.util.ErrorMessageBuilder.buildErrorMessage(&apos;批量数据交换&apos;, customMessage, e.javaException || null);
			if (e.javaException) {
				logger.error(errorContent, e.javaException);	
			} else {
				logger.error(errorContent);
			}
			
			response.setError(errorContent);

			mqObj.setError(errorContent);
		} else {
			response.setError(details);
			mqObj.setError(details);
		}
	} else {
		response = new Response(getServletResponseStr(details));
		
		var mqObj = channelMap.get(&apos;mqObj&apos;) || getExMqObject(channelMap.get(&apos;paramobj&apos;).resAskId);
		mqObj.setCode(1);
	}

	mqObj.produce();
	
	responseMap.put(&apos;response&apos;, response);
	PrintUtil.end(&apos;创建返回资源&apos;);
	return response;
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>a4898816-e3a7-4ba1-b4c1-27fdf90dd16e</id>
      <name>加解密相关函数</name>
      <revision>2</revision>
      <lastModified>
        <time>1563442545066</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	对象的加密

	@param {Object} object - 对象
	@param {String} encodeType - 加密方式，默认base64
	@return {String} return base64字符串
*/
function exEncode(object, encodeType) {
	if(!encodeType){
		encodeType = &quot;base64&quot;;
	}
	if(encodeType == &quot;base64&quot;){
		return object2Base64Str(object);
	} else {
		//后续可以增加其他加密方式
		return &quot;&quot;;
	}
}


/**
	对象的解密

	@param {String} string - base64字符串
	@param {String} decodeType - 解密方式
	@return {Object} return 对象
*/
function exDecode(string, decodeType) {
	if(!decodeType){
		decodeType = &quot;base64&quot;;
	}
	if(decodeType == &quot;base64&quot;){
		return base64Str2Object(string);
	} else {
		//后续可以增加其他解密方式
		return null;
	}
	
}


</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>883c8f59-32e6-4b65-9650-a4569488f456</id>
      <name>参数检查转换函数</name>
      <revision>4</revision>
      <lastModified>
        <time>1564020137781</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	参数检查转换函数

	@param {JSON} arg1 - json参数
	@return 
*/
function exCheckParam(paramObj) {
	if(paramObj.source.fieldInc){
		paramObj.source.fieldInc = paramObj.source.fieldInc.toUpperCase();
	}
	if(paramObj.source.pk){
		paramObj.source.pk = paramObj.source.pk.toUpperCase();
	}
	if(paramObj.target.pk){
		paramObj.target.pk = paramObj.target.pk.toUpperCase();
	}
	for(var i=0; i&lt;paramObj.target.fieldsmap.length; i++){
		var fieldmap = paramObj.target.fieldsmap[i];
		if(fieldmap.src){
			fieldmap.src = fieldmap.src.toUpperCase();
		}
		if(fieldmap.dest){
			fieldmap.dest = fieldmap.dest.toUpperCase();
		}
	}
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>51aea973-144e-4ef7-ad89-8601c67bfea2</id>
      <name>处理数据函数</name>
      <revision>24</revision>
      <lastModified>
        <time>1564450042980</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	处理数据，根据是否有目标的api，来判断是写数据库，还是调用接口.

	@param {List} listData - 数据列表
	@return {JSON} return 返回json对象
*/
function exProcessData(listData, callNum) {
	var paramobj = channelMap.get(&apos;paramobj&apos;);
	paramobj.callNum = callNum;
	//克隆一下，防止cmd后面需要使用
	var paramClone = JSON.parse(JSON.stringify(paramobj));
	if(paramobj.target.api){
		if(!paramobj.target.api.endsWith(&apos;/&apos;)){
	     	paramobj.target.api = paramobj.target.api + &apos;/&apos;;
	     }
	     //调用mc接口
		paramClone.cmd = &apos;recievedata&apos;;
		return _callHttpPost(listData, paramClone);
	} else {
		//直写数据库
		return WriteDbUtil.exWriteDb(listData, paramClone);
	}
}

function _callHttpPost(listData, paramobj){
	paramobj.source.data = exEncode(listData, paramobj.source.encodeType);
	return callHttpPost(paramobj.target.api, JSON.stringify(paramobj));
}
</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>c8e1f8e9-a6c7-44b3-a640-385c6917808d</id>
      <name>序列号及base64相关函数</name>
      <revision>2</revision>
      <lastModified>
        <time>1564025457702</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	对象序列化为字节数组

	@param {object} object - 对象
	@return {byte[]} return 字节数组
*/
function object2Bytes(object) {
	var byteArrayOutputStream;
	var objectOutputStream;
	try{
		byteArrayOutputStream = new ByteArrayOutputStream();
		objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
		objectOutputStream.writeObject(object);
		return byteArrayOutputStream.toByteArray();
	} finally{
		if (byteArrayOutputStream != null) {
			try {
				byteArrayOutputStream.close();
			} catch (e) {}
		}
		if (objectOutputStream != null) {
			try {
				objectOutputStream.close();
			} catch (e) {}
		}
	}
}

/**
	对象序列化为字节数组，并用Base64加码

	@param {object} object - 对象
	@return {String} return 字符串
*/
function object2Base64Str(object) {
	var bytes = object2Bytes(object);
	return FileUtil.encode(bytes);
}

/**
	对象序列化为字节数组

	@param {byte[]} object - 字节数组
	@return {Object} return 对象
*/
function bytes2Object(bytes) {
	var byteArrayInputStream;
	var objectInputStream;
	try {
		byteArrayInputStream = new ByteArrayInputStream(bytes);
		objectInputStream = new ObjectInputStream(byteArrayInputStream);
		return objectInputStream.readObject();
	} finally {
		if (byteArrayInputStream != null) {
			try {
				byteArrayInputStream.close();
			} catch (e) {}
		}
		if (objectInputStream != null) {
			try {
				objectInputStream.close();
			} catch (e) {}
		}
	}
}


/**
	Base64加码字符串反序列号为对象

	@param {string} string - 字符串
	@return {Object} return 对象
*/
function base64Str2Object(string) {
	var bytes = FileUtil.decode(string);
	return bytes2Object(bytes);
}
</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>474bb3c2-86ff-44aa-8d10-8f2c618c7fe7</id>
      <name>引入包</name>
      <revision>11</revision>
      <lastModified>
        <time>1564450402102</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>CHANNEL_POSTPROCESSOR</contextType>
          <contextType>CHANNEL_ATTACHMENT</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>COMPILED_CODE</type>
        <code>importPackage(Packages.org.apache.commons.dbutils);
importPackage(Packages.java.util);
importPackage(Packages.java.io);
importPackage(Packages.java.lang);
//httpclient需要的包
importPackage(Packages.org.apache.http.impl.client);
importPackage(Packages.org.apache.http.client.methods);
importPackage(Packages.org.apache.http.client.config);
importPackage(Packages.org.apache.http.entity);
importPackage(Packages.org.apache.http);
importPackage(Packages.org.apache.http.util);
importPackage(Packages.org.apache.http.client.utils);
importPackage(Packages.java.nio.charset);

//检查重复执行
importPackage(Packages.java.util.concurrent);

//日期类型转换
importPackage(Packages.com.mirth.connect.util);

//数据交换消息

//扩展String，增加trim
if (typeof String.prototype.trim != &apos;function&apos;) {
  String.prototype.trim = function (str){
     return this.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);
  };
}
//扩展String,判断当前字符串是否以str结束
if (typeof String.prototype.endsWith != &apos;function&apos;) {
  String.prototype.endsWith = function (str){
     return this.slice(-str.length) == str;
  };
}
	     
</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>fc7190c8-1277-4c82-8de6-9059d28d9559</id>
      <name>数据写入函数</name>
      <revision>90</revision>
      <lastModified>
        <time>1566876455471</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	写入数据到数据库

	@param {List} arg1 - 数据
	@return {none} return 无返回
*/
var WriteDbUtil = {
};

WriteDbUtil.exWriteDb = function(listData, paramobj) {
	
	var dbConn;
	var target = paramobj.target;
	var errorMsg;
	
	try{
		errorMsg = &apos;获取目标数据库连接失败&apos;;
		dbConn = DatabaseConnectionFactory.createDatabaseConnection(target.driverClassName
			,target.jdbcurl, target.dbuser, target.dbpwd);

		//根据参数处理
		return _processData(paramobj, dbConn, listData);
	}catch (e) {
		if (e.javaException) {
			logger.error(errorMsg, e.javaException);	
		} else {
			logger.error(errorMsg, e);
		}
		return getServletResponseJson(errorMsg + e.toString(), -1);
	} finally {
		if (dbConn) { 
			//里面有try
			dbConn.close();
		}
	}

	
	//listdata 是java的ArrayList&lt;HashMap&lt;源表字段,data&gt;&gt;
	function _processData(paramobj, dbConn, listData){
		var errorMsg = &apos;处理数据失败&apos;;
	
		try{
		//1判断是否有删除语句
		//1.1有则先执行，然后通过fieldsmap生成insert语句
		//1.2没有，则根据主键生成判断目标表是否存在sql执行，根据结果生成insert语句、update语句、insert数据、update数据

		//源表主键可能是多个，目标表主键只能是一个
		var srcPks = paramobj.source.pk.split(&quot;,&quot;);
		for (i=0; i&lt;srcPks.length; i++){
			srcPks[i] = srcPks[i].trim().toUpperCase();
		}

		if(paramobj.target.deletesql){
			//只有第一次才删除
			if(paramobj.callNum &amp;&amp; paramobj.callNum==1){
				errorMsg = &apos;目标库执行删除语句失败&apos;;
				PrintUtil.msg(&quot;执行删除：&quot; + paramobj.target.deletesql);
				dbConn.executeUpdate(paramobj.target.deletesql);
			}
			errorMsg = &apos;获取插入sql失败&apos;;
			var sql = _getInsertSql(paramobj);
			var listParams = _listInsertParam(paramobj, listData, srcPks);
			errorMsg = &apos;执行写入目标库失败&apos;;
			_exWriteBatch(dbConn.getConnection(), sql, listParams);
	
			var servletResponse = getServletResponseJson(&apos;执行成功&apos;);
			servletResponse.target = {};
			servletResponse.target.rowsInsert = listData.size();
			return servletResponse;
		} else {
			//按源、目标的主键匹配关系，生成Map&lt;目标表字段主键值,数据&gt;，把所有的主键生成查询语句在目标库执行
			//存在的主键，生成更新的Map&lt;目标表字段主键值,数据&gt;，其余的是插入的Map&lt;目标表字段主键值,数据&gt;
	
			//转为目标主键的map，对相同主键的值，在一个批次中会去重，后面的数据覆盖前面的
			var mapDestKeyData = _data2MapKey(listData, srcPks);
			errorMsg = &apos;获取目标库查询sql失败&apos;;
			//获取查询主键存在语句
			var existsSql = _getExistsSql(mapDestKeyData, paramobj.target.pk, paramobj.target.table);

			errorMsg = &apos;生成更新记录失败&apos;;
			//生成更新记录
			var mapUpdate = _getUpdateDataMap(mapDestKeyData, existsSql);

			if(mapDestKeyData.size() &gt; 0){
				errorMsg = &apos;获取插入sql失败&apos;;
				var sql = _getInsertSql(paramobj);
				var listParams = _listInsertParam(paramobj, Arrays.asList(mapDestKeyData.values().toArray()), srcPks);
				errorMsg = &apos;目标库执行插入失败&apos;;
				PrintUtil.msg(&quot;插入目标sql：&quot;+sql);
				_exWriteBatch(dbConn.getConnection(), sql, listParams);
			}

			if(mapUpdate.size() &gt; 0){
				errorMsg = &apos;获取更新sql失败&apos;;
				var sql = _getUpdateSql(paramobj);
				var listParams = _listUpdateParam(paramobj, mapUpdate);

				errorMsg = &apos;执行目标库更新sql失败&apos;;
				PrintUtil.msg(&quot;更新目标sql：&quot;+sql);
				_exWriteBatch(dbConn.getConnection(), sql, listParams);
			}

			var servletResponse = getServletResponseJson(&apos;执行成功&apos;);
			servletResponse.target = {};
			servletResponse.target.rowsInsert = mapDestKeyData.size();
			servletResponse.target.rowsUpdate = mapUpdate.size();
			if(listData.size() &gt; mapDestKeyData.size() + mapUpdate.size()){
				servletResponse.target.rowsIgnore = listData.size() - mapDestKeyData.size() - mapUpdate.size();
			}
			return servletResponse;
		}
		}catch (e) {
			if (e.javaException) {
				logger.error(errorMsg, e.javaException);	
			} else {
				logger.error(errorMsg, e);
			}
			return getServletResponseJson(errorMsg + e.toString(), -1);
		} 
	}

	function _getUpdateDataMap(mapDestKeyData, existsSql){
		//获取目标表存在的主键值
		var cachedRowSet = dbConn.executeCachedQuery(existsSql, Arrays.asList(mapDestKeyData.keySet().toArray()));
		var mapUpdate = new HashMap();
		while(cachedRowSet.next()){
			var pkValue = cachedRowSet.getString(1);
			if(mapDestKeyData.containsKey(pkValue)){
				mapUpdate.put(pkValue, mapDestKeyData.remove(pkValue));
			}
		}
		return mapUpdate;
	}

	function _getExistsSql(mapDestKeyData, destPk, destTable){
		var sql = &apos;select &apos;+destPk+&apos; from &apos;+destTable+&apos; where &apos;+destPk+&apos; in (&apos;;
		var values = &apos;&apos;;

		//
		var arrData = mapDestKeyData.keySet().toArray();
		for(var i=0;i&lt;arrData.length;i++){
			if(values){
				values = values + &apos;,?&apos;;
			} else {
				values = &apos;?&apos;;
			}
		}
		return sql + values + &apos;)&apos;;
	}

	function _data2MapKey(listdata, srcPks){
		//listdata 是java的ArrayList&lt;HashMap&lt;源表字段,data&gt;&gt;
		//把listdata转为Map&lt;目标表字段主键值,data&gt;
		var mapResult = new HashMap();
		for(var i=0;i&lt;listdata.size();i++){
			var row = listdata.get(i);
			var destPkValue = _getDestPkValue(srcPks, row);
			mapResult.put(destPkValue, row);
		}
		return mapResult;
	}

	function _getDestPkValue(srcPks, row){
		var destPkValue = &apos;&apos;;
		for (j=0; j&lt;srcPks.length; j++){
			var srcField = srcPks[j];
			if(srcField){
				if(destPkValue){
					destPkValue = destPkValue + &apos;,&apos; + row.get(srcField);
				} else {
					destPkValue = row.get(srcField) + &apos;&apos;;
				}
				
			}
		}
		return destPkValue;
	}
	
	function _listInsertParam(paramobj, listdata, srcPks){
		var list = [];
		for(var i=0;i&lt;listdata.size();i++){
			var row = listdata.get(i);
			var rowParam = [];
			rowParam.push(_getDestPkValue(srcPks, row));
			for(var j=0;j&lt;paramobj.target.fieldsmap.length;j++){
				var fieldmap = paramobj.target.fieldsmap[j];
				if(!fieldmap.dest){
					continue;
				}
				if(fieldmap.dest == paramobj.target.pk){
					continue;
				}
				rowParam.push(row.get(fieldmap.src));
			}
			list.push(rowParam);
		}
	
		return list;
	}
	
	function _listUpdateParam(paramobj, mapUpdate){
		var list = [];
		var iterator = mapUpdate.entrySet().iterator();
		while(iterator.hasNext()){
			var entry = iterator.next();
			var row = entry.getValue();
			var rowParam = [];
			for(var j=0;j&lt;paramobj.target.fieldsmap.length;j++){
				var fieldmap = paramobj.target.fieldsmap[j];
				if(!fieldmap.dest){
					continue;
				}
				//如果是主键，放最后
				if(fieldmap.dest == paramobj.target.pk){
					continue;
				}
				rowParam.push(row.get(fieldmap.src));
			}
			//增加主键
			rowParam.push(entry.getKey());
			list.push(rowParam);
		}
	
		return list;
	}
	
	//返回sql
	function _getInsertSql(paramobj){
		//语句第一个字段为主键
		var fields = paramobj.target.pk;
		var values = &apos;?&apos;;
		for(var i=0;i&lt;paramobj.target.fieldsmap.length;i++){
			var fieldmap = paramobj.target.fieldsmap[i];
			if(!fieldmap.dest){
				continue;
			}
			//主键可不需配置在映射关系中
			if(fieldmap.dest == paramobj.target.pk){
				continue;
			}
			if(fields){
				fields = fields + &apos;,&apos; + fieldmap.dest;
				values = values + &apos;,&apos; + &apos;?&apos;;
			} else {
				fields = fieldmap.dest;
				values = &apos;?&apos;;
			}
		}
		return &apos;insert into &apos; + paramobj.target.table + &apos;(&apos;+ fields + &apos;) values(&apos; + values+ &apos;)&apos;;
	}
	
	function _getUpdateSql(paramobj){
		var fieldsvalue = &apos;&apos;;
		for(var i=0;i&lt;paramobj.target.fieldsmap.length;i++){
			var fieldmap = paramobj.target.fieldsmap[i];
			if(!fieldmap.dest){
				continue;
			}
			//如果是主键，跳过
			if(fieldmap.dest == paramobj.target.pk){
				continue;
			}
			if(fieldsvalue){
				fieldsvalue = fieldsvalue + &apos;,&apos; + fieldmap.dest + &apos;=?&apos;;
			} else {
				fieldsvalue = fieldmap.dest + &apos;=?&apos;;
			}
		}
		return &apos;update &apos; + paramobj.target.table + &apos; set &apos;+ fieldsvalue + &apos; where &apos; + paramobj.target.pk + &apos;=?&apos;;
	}
	
	function _exWriteBatch(conn, sql, listValue) {
		var preparedStatement;
		try {
			conn.setAutoCommit(false);
			preparedStatement = conn.prepareStatement(sql);
			for (var i=0;i&lt;listValue.length;i++) {
				var row = listValue[i];
		          _setPrepareStatementValues(preparedStatement, row);
		          preparedStatement.addBatch();
	     	}
	     	preparedStatement.executeBatch();
	     	conn.commit();
		} catch(e) {
			conn.rollback();
			throw e;
		} finally {
			_exClosePs(preparedStatement);
		}
	}
	
	function _exClosePs(preparedStatement) {
		if(preparedStatement){
			DbUtils.closeQuietly(preparedStatement);
		}
	}
	
	function _setPrepareStatementValues(stmt, values) {
		for (var i = 0; i &lt; values.length; i++) {
			stmt.setObject(i + 1, values[i]);
		}
	}

}
</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>e7c6c0e0-4611-4049-a01f-7ce7c67ae818</id>
      <name>数据库工具工厂类</name>
      <revision>5</revision>
      <lastModified>
        <time>1564127980151</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var DbUtilFactory= {};

DbUtilFactory.get = function(dbConn){
	var driverName = dbConn.getConnection().getMetaData().getDriverName().toUpperCase();
	if(driverName.indexOf(&quot;POSTGRESQL&quot;) &gt;= 0){
		return PgDbUtil;
	} else if (driverName.indexOf(&quot;ORACLE&quot;) &gt;= 0){
		return OracleDbUtil;
	} else {
		return SqlServerDbUtil;
	} 
}
</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>e57c103f-92bc-4235-a955-ddb6e860f5f1</id>
      <name>数据库方言工具对象-oracle</name>
      <revision>5</revision>
      <lastModified>
        <time>1564130578888</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var OracleDbUtil={};

OracleDbUtil.getNow = function(dbConn){
	var cachedRowSet = dbConn.executeCachedQuery(&quot;select to_char(sysdate,&apos;yyyy-mm-dd hh24:mi:ss&apos;) gnow from dual&quot;, new ArrayList());
	cachedRowSet.next();
	return cachedRowSet.getString(0);
}
</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>7180031c-3e75-4368-9484-1327167f5a50</id>
      <name>数据库方言工具对象-postgresql</name>
      <revision>4</revision>
      <lastModified>
        <time>1564127980200</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var PgDbUtil={};

PgDbUtil.getNow = function(dbConn){
	var cachedRowSet = dbConn.executeCachedQuery(&quot;SELECT to_char(now(),&apos;yyyy-mm-dd hh24:mi:ss&apos;)&quot;, new ArrayList());
	cachedRowSet.next();
	return cachedRowSet.getString(1);
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>ac5e4ea2-956e-454c-a9dc-c7a06b009bc0</id>
      <name>数据库方言工具对象-sqlserver</name>
      <revision>2</revision>
      <lastModified>
        <time>1564127980220</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
var SqlServerDbUtil={};

SqlServerDbUtil.getNow = function(dbConn){
	var cachedRowSet = dbConn.executeCachedQuery(&quot;select convert(varchar(20),getdate(),120) gnow&quot;, new ArrayList());
	cachedRowSet.next();
	return cachedRowSet.getString(1);
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>0b27a256-b4ef-46ba-b04f-26f6dbcf4967</id>
      <name>数据集相关函数</name>
      <revision>2</revision>
      <lastModified>
        <time>1563869726707</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	获取数据集的结构

	@param {ResultSet} resultSet - 数据集
	@return {ArrayList} 返回数据集的结构
*/
function listResultSetMetaData(resultSet) {
	var list = new ArrayList();

	var resultSetMetaData = resultSet.getMetaData();

	for (var i = 1; i &lt;= resultSetMetaData.getColumnCount(); i++) {
		var columnName = resultSetMetaData.getColumnName(i).toUpperCase();
		var columnType = resultSetMetaData.getColumnTypeName(i);
		var map = new HashMap();
		map.put(&apos;column&apos;,columnName);
		map.put(&apos;type&apos;,columnType);
		list.add(map);
	}

	return list;
}

function getResultRow(resultSet, listMetaData){
	var row = new HashMap();
	var colMetaData;
	var fieldName;
	for (var i = 0; i &lt; listMetaData.size(); i++) {
		colMetaData = listMetaData.get(i);
		fieldName = colMetaData.get(&apos;column&apos;);
		row.put(fieldName, getResultCol(resultSet, fieldName, colMetaData.get(&apos;type&apos;)));
	}
	return row;
}

function getResultCol(resultSet, fieldName, fieldType){
	if (&apos;clob&apos; == fieldType) {
		return resultSet.getClob(fieldName);
	} else if (&apos;blob&apos; == fieldType) {
		return resultSet.getBlob(fieldName);
	} else {
		return resultSet.getObject(fieldName);
	}
}
</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>0ef3d49c-9cd0-409a-abd5-5f0e4b2dbb72</id>
      <name>测试函数</name>
      <revision>1</revision>
      <lastModified>
        <time>1563332377693</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function testStrJava(result) {
	var chars = [&apos;a&apos;,&apos;b&apos;,&apos;0&apos;];

	logger.info(&quot;cdate类型=&quot;+getClassName(result.getObject(&quot;cdate&quot;)));

	var map = new HashMap();
	map.put(&quot;dbId&quot;, result.getObject(&quot;db_id&quot;));
	map.put(&quot;cdate&quot;, result.getObject(&quot;cdate&quot;));

	var string = exEncode(map);
	logger.info(&quot;map序列号并base64：&quot;+string);

	var toMap2 = exDecode(string);
	logger.info(&quot;toMap2类型=&quot;+getClassName(toMap2));
	logger.info(&quot;base64字符串反序列号为map：&quot;+toMap2);
	
	
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>0260b377-2eaf-4d20-bdd0-95f551d79794</id>
      <name>消息相关函数</name>
      <revision>40</revision>
      <lastModified>
        <time>1568947694104</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>CHANNEL_POSTPROCESSOR</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	发送数据交换消息.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getExMqObject(paramObj){
	var obj = new ExMqObject(paramObj);
	obj.setSourceBegin();
	channelMap.put(&apos;mqObj&apos;, obj);
	return obj;
}

function ExMqObject(paramObj) {
	this.resAskId = paramObj.resAskId;
	this.jobLogId = paramObj.jobLogId;
	this.source = {};
	this.target = {};
	this.messageServer = paramObj.messageServer;
	this.produced = false;
}

ExMqObject.prototype = {
	setCode : function(code){
		this.code = code;
	},
	setError : function(error){
		this.error = error;
	},
	setEnd : function(){
		this.source.isEnd = 1;
	},
	setSourceBegin : function(){
		this.source.exeBeginTime = this._getMqTime();
	},
	setSourceRows : function(rows){
		this.source.rows = rows;
		this.source.exeEndTime = this._getMqTime();
		this.source.exeCostTime = this._getTimeCost(this.source.exeBeginTime, this.source.exeEndTime);
	},
	setTargetBegin : function(){
		this.target.exeBeginTime = this._getMqTime();
	},
	setTargetRowsInsert : function(rows){
		this.target.rowsInsert = rows;
	},
	setTargetRowsUpdate : function(rows){
		this.target.rowsUpdate = rows;
	},
	setTargetEnd : function(){
		this.target.exeEndTime = this._getMqTime();
		this.target.exeCostTime = this._getTimeCost(this.target.exeBeginTime, this.target.exeEndTime);
	},
	produce : function() {
		//防止发消息异常后，再次进入异常中的发消息
		if(this.produced){
			return;
		}
		this.produced = true;
		//logger.info(&apos;发布消息mqObj：&apos;+JSON.stringify(this));
		var util = MessageServerFactory.get(this.messageServer);
		if(util){
			//消息异常，不处理
			try{
				util.produce(this.messageServer, JSON.stringify(this));
			}catch(e){
				logger.error(&quot;交换消息异常：&quot;+e.toString());
			}
		}
	},
	_getMqTime: function() {
		return new Date().getTime();
	},
	_getTimeCost: function(begin, end){
		return end-begin;
	}

	
}

var MessageServerFactory= {};

MessageServerFactory.get = function(messageServer){
	if(messageServer &amp;&amp; messageServer.indexOf(&quot;http&quot;) == 0){
		return MSHttpUtil;
	}
}

var MSHttpUtil = {};

MSHttpUtil.produce = function(url, data){
	var result = callHttpPost(url, data);
}

</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>85f6f21b-6f4f-4079-9a9e-115d122dd3a6</id>
      <name>类名相关函数</name>
      <revision>2</revision>
      <lastModified>
        <time>1563524584657</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getClassName(obj) {
	if(obj){
		var className = &apos;&apos;;
		try{
			className = obj.getClass().toString();
		} catch(e){}
		return className + &quot;/&quot; + typeof obj;
	} else {
		return &quot;null&quot;;
	}
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>283fb344-0c24-47c6-ba66-06eb9f0b9db1</id>
      <name>获取ServletResponse返回的json对象函数</name>
      <revision>5</revision>
      <lastModified>
        <time>1566886307598</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>CHANNEL_POSTPROCESSOR</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	获取ServletResponse的json对象，包含2个属性,code,msg

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getServletResponseJson(msg, code) {
	if(!code){
		code = 1;
	}
	var obj = new ServletResponseObj(msg);
	obj.setCode(code);
	return obj;
}

function getServletResponseStr(msg, code) {
	return JSON.stringify(getServletResponseJson(msg, code));
}

function ServletResponseObj(msg){
	this.msg = msg;
}


ServletResponseObj.prototype = {
	setCode : function(code){
		this.code = code;
	},
	setValueInc : function(valueInc){
		this.valueInc = valueInc;
	},
}
</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>fa021cb6-4d0b-41e7-95ee-6ece8680a172</id>
      <name>获取最大增量值</name>
      <revision>4</revision>
      <lastModified>
        <time>1564022270185</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	获取最大增量值
	
	@param {Object} data - 增量字段值
	@param {String} valueInc - 原增量值
	@return {String} return 最大值
*/
function getMaxValueInc(data, valueInc, dbNow) {
	if(data){
		var dataStr = StringUtil.valueOf(data);
		if(dataStr.indexOf(&apos;-&apos;)&gt;0){
			//对日期类型的，需要比较数据库的当前值，大于的忽略
			if(dataStr&gt;dbNow){
				//忽略
			} else {
				valueInc = dataStr&gt;valueInc ? dataStr: valueInc;
			}
		} else {
			valueInc = dataStr&gt;valueInc ? dataStr: valueInc;
		}
		//logger.info(&apos;dataStr:&apos;+dataStr+&apos;,valueInc:&apos;+valueInc);
		return valueInc;
	} else {
		return valueInc;
	}
}</code>
      </properties>
    </codeTemplate>
    <codeTemplate version="3.7.1">
      <id>058b5078-2e5c-4548-8955-757327c9e0b2</id>
      <name>防止重复执行</name>
      <revision>24</revision>
      <lastModified>
        <time>1566802978423</time>
        <timezone>Asia/Shanghai</timezone>
      </lastModified>
      <contextSet>
        <delegate>
          <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
          <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          <contextType>CHANNEL_POSTPROCESSOR</contextType>
          <contextType>SOURCE_RECEIVER</contextType>
          <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
          <contextType>DESTINATION_DISPATCHER</contextType>
        </delegate>
      </contextSet>
      <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
        <type>FUNCTION</type>
        <code>/**
	执行检查

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function ExecCheckUtil(){
	
}

ExecCheckUtil.checkResAskId = function(paramObj){
	var key = paramObj.resAskId + paramObj.cmd;
	var map;
	if(globalMap.containsKey(&apos;mapExResAskId&apos;)){
		map = globalMap.get(&apos;mapExResAskId&apos;);
	} else {
		//PrintUtil.msg(&apos;---新建检查重复执行ConcurrentHashMap&apos;);
		map = new ConcurrentHashMap();
		globalMap.put(&apos;mapExResAskId&apos;, map);
	}
	if(map.containsKey(key)){
		//PrintUtil.msg(&apos;---检查失败&apos; + key);
		//PrintUtil.msg(&apos;---map:&apos; + map.toString());
		//map.clear();
		return createExOutcome(&apos;任务正在执行&apos;, 500);
	} else {
		PrintUtil.msg(&apos;---检查成功&apos; + key);
		var execId = UUIDGenerator.getUUID();
		map.put(key, execId);
		channelMap.put(&apos;execId&apos;, execId);
		return null;
	}
}
	
ExecCheckUtil.endExec = function(paramObj){
	
	var key = paramObj.resAskId + paramObj.cmd;
	var map = globalMap.get(&apos;mapExResAskId&apos;);
	if(map.containsKey(key)){
		//检查是否本通道放的
		if(channelMap.containsKey(&apos;execId&apos;)){
			var execId = channelMap.get(&apos;execId&apos;);
			if(map.get(key) == execId){
				map.remove(key);
				PrintUtil.msg(&apos;-----释放----&apos;+key);
			}
		}
	} else {
		//PrintUtil.msg(&apos;-----map不包含key,map:&apos;+map.toString());
	}
}
</code>
      </properties>
    </codeTemplate>
  </codeTemplates>
</codeTemplateLibrary>